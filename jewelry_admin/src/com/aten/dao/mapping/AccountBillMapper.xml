<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.aten.dao.AccountBillDao">

	<!-- 数据库映射模型区域 -->
	<resultMap id="resultAccountBill" type="com.aten.model.orm.AccountBill" >
		<result property="id" column="id" />
		<result property="create_time" column="create_time" />
		<result property="bill_number" column="bill_number" />
		<result property="account_id" column="account_id" />
		<result property="bill_name" column="bill_name" />
		<result property="order_id" column="order_id" />
		<result property="pay_way" column="pay_way" />
		<result property="bill_type" column="bill_type" />
		<result property="io_type" column="io_type" />
		<result property="amount" column="amount" />
		<result property="note" column="note" />
	</resultMap>

	<!-- 新增数据区域 -->
	<sql id="insertCommon">
		INSERT INTO t_account_bill
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null"> id,</if>
			create_time,
			<if test="bill_number != null"> bill_number,</if>
			<if test="account_id != null"> account_id,</if>
			<if test="bill_name != null"> bill_name,</if>
			<if test="order_id != null"> order_id,</if>
			<if test="pay_way != null"> pay_way,</if>
			<if test="bill_type != null"> bill_type,</if>
			<if test="io_type != null"> io_type,</if>
			<if test="amount != null"> amount,</if>
			<if test="note != null"> note</if>
			
		</trim>
		<trim prefix="VALUES (" suffix=")" suffixOverrides=",">
			<if test="id != null">#{id},</if>
			now(),
			<if test="bill_number != null">#{bill_number},</if>
			<if test="account_id != null">#{account_id},</if>
			<if test="bill_name != null">#{bill_name},</if>
			<if test="order_id != null">#{order_id},</if>
			<if test="pay_way != null">#{pay_way},</if>
			<if test="bill_type != null">#{bill_type},</if>
			<if test="io_type != null">#{io_type},</if>
			<if test="amount != null">#{amount},</if>
			<if test="note != null">#{note}</if>
			
		</trim>
	</sql>
	
	<insert id="insert" parameterType="com.aten.model.orm.AccountBill">
		<include refid="insertCommon" />
	</insert>

	<insert id="insertGetPk" parameterType="com.aten.model.orm.AccountBill" >
		<include refid="insertCommon" />
		<selectKey resultType="String" order="AFTER" keyProperty="id">  
	       SELECT @@IDENTITY AS ID  
	    </selectKey>  
	</insert>
	
	<!-- 更新数据区域 -->
	<sql id="update_clause">
		<set>
			<trim suffixOverrides=",">
				<if test="id != null"> id = #{id}, </if>
				<if test="create_time != null"> create_time = #{create_time}, </if>
				<if test="bill_number != null"> bill_number = #{bill_number}, </if>
				<if test="account_id != null"> account_id = #{account_id}, </if>
				<if test="bill_name != null"> bill_name = #{bill_name}, </if>
				<if test="order_id != null"> order_id = #{order_id}, </if>
				<if test="pay_way != null"> pay_way = #{pay_way}, </if>
				<if test="bill_type != null"> bill_type = #{bill_type}, </if>
				<if test="io_type != null"> io_type = #{io_type}, </if>
				<if test="amount != null"> amount = #{amount}, </if>
				<if test="note != null"> note = #{note} </if>
				
			</trim>
		</set>
	</sql>
	
	
	
	

	<update id="update" parameterType="com.aten.model.orm.AccountBill">
		UPDATE t_account_bill <include refid="update_clause" /> WHERE id = #{id}
	</update>

	<!-- 删除数据区域 -->
	<delete id="delete" parameterType="String">
		delete from t_account_bill where id in
		<foreach item="idItem" collection="array" index="index" open="(" separator="," close=")">
			#{idItem}
		</foreach>
	</delete>

	<!-- 获取对象数据区域 -->
	<select id="get" parameterType="String"	resultMap="resultAccountBill">
		 SELECT
		 t.id,t.create_time,t.bill_number,t.account_id,t.bill_name,t.order_id,t.pay_way,t.bill_type,t.io_type,t.amount,t.note
		 FROM t_account_bill t WHERE id = #{id}
	</select>
	
	<!-- 搜索数据区域 -->
	<sql id="where_clause">
		<where> 
			1=1
			<if test="id != null"> and t.id = #{id} </if>
			<if test="id_vague != null"> and instr(t.id,#{id_vague})>0 </if>
			<if test="create_time != null"> and t.create_time = #{create_time} </if>
			<if test="create_time_vague != null"> and instr(t.create_time,#{create_time_vague})>0 </if>
			<if test="bill_number != null"> and t.bill_number = #{bill_number} </if>
			<if test="bill_number_vague != null"> and instr(t.bill_number,#{bill_number_vague})>0 </if>
			<if test="account_id != null"> and t.account_id = #{account_id} </if>
			<if test="account_id_vague != null"> and instr(t.account_id,#{account_id_vague})>0 </if>
			<if test="bill_name != null"> and t.bill_name = #{bill_name} </if>
			<if test="bill_name_vague != null"> and instr(t.bill_name,#{bill_name_vague})>0 </if>
			<if test="order_id != null"> and t.order_id = #{order_id} </if>
			<if test="order_id_vague != null"> and instr(t.order_id,#{order_id_vague})>0 </if>
			<if test="pay_way != null"> and t.pay_way = #{pay_way} </if>
			<if test="pay_way_vague != null"> and instr(t.pay_way,#{pay_way_vague})>0 </if>
			<if test="bill_type != null"> and t.bill_type = #{bill_type} </if>
			<if test="bill_type_vague != null"> and instr(t.bill_type,#{bill_type_vague})>0 </if>
			<if test="io_type != null"> and t.io_type = #{io_type} </if>
			<if test="io_type_vague != null"> and instr(t.io_type,#{io_type_vague})>0 </if>
			<if test="amount != null"> and t.amount = #{amount} </if>
			<if test="amount_vague != null"> and instr(t.amount,#{amount_vague})>0 </if>
			<if test="note != null"> and t.note = #{note} </if>
			<if test="note_vague != null"> and instr(t.note#{note_vague})>0 </if>
			
		</where>
	</sql>
	
	<sql id="getCommon">
		select  t.id,t.create_time,t.bill_number,t.account_id,t.bill_name,t.order_id,t.pay_way,t.bill_type,t.io_type,t.amount,t.note
		from t_account_bill t
		<include refid="where_clause" /> order by id desc
	</sql>

	

	<select id="getList" parameterType="map" resultMap="resultAccountBill">
            <include refid="getCommon" />
             <if test="start != null">
         		LIMIT ${start},${limit}
        	</if> 
	</select>

	<select id="getCount" parameterType="map" resultType="int">
			select count(*) ct from t_account_bill t <include refid="where_clause" />
	</select>
	
	<select id="queryList" parameterType="map" resultMap="resultAccountBill">
		select * from t_account_bill t
		<include refid="where_clause" />

		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	<!-- 排序区域 -->
	<update id="updateBatch" parameterType="java.util.List">
	   <foreach collection="list" item="item" index="index" separator=";">  
			update t_account_bill 
			<set>
				sort_no = #{item.sort_no}
			</set>
			WHERE id = #{item.id}
	   </foreach>
	</update>
	
</mapper>

